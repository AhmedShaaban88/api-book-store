#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('book-store:server');
const http = require('http');
const { createTerminus } = require('@godaddy/terminus');
const mongoose = require('mongoose');
const cluster = require('cluster');
const numCPUs = require('os').cpus().length;
const port = normalizePort(process.env.PORT || '4000');
app.set('port', port);


const server = http.createServer(app);


// graceful shutdown
const onSignal = () => {
  console.log('server is starting cleanup');
  return Promise.resolve(() => {
    server.close(err => {
      if (err) {
        console.error(err)
        return process.exit(1)
      }
      mongoose.connection.close(false, () => {
        console.log('MongoDb connection closed.');
        process.exit(0)
      });

    });
  })
}
const onShutdown = () => {
  console.log('cleanup finished, server is shutting down');
}
function onHealthCheck ({ state }) {
  return Promise.resolve('force shutdown')
}
const options = {
  // logger: console,
  signals: ['SIGINT', 'SIGTERM'],
  healthChecks: {
    '/healthcheck': onHealthCheck
  },
  onSignal,
  onShutdown,
}
createTerminus(server, options)

if (cluster.isMaster) {
  // Fork workers.
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  cluster.on('exit', (worker, code, signal) => {
    process.env.NODE_ENV === "dev" && console.log(`worker ${worker.process.pid} died ${worker.id}`);
    cluster.fork();
  });
}else {
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}


function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}


function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



